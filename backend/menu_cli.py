"""
app.py

Autor: Petrus
Prop√≥sito: Arquivo principal com interface de terminal para o sistema 'Meu Doce Dinheiro'.
Permite listar usu√°rios, categorias e transa√ß√µes, adicionar novas transa√ß√µes,
e gerenciar o banco de dados local de forma interativa.

Execu√ß√£o: python app.py
"""

import time
import unicodedata

# Importa m√≥dulos internos do app
from backend.app.scripts.db           import criar_tabelas
from app.utils        import exibir_tabela, validar_data
from app.users        import get_users
from app.categories   import get_categories
from app.transactions import get_transactions, add_transacao

# Defini√ß√µes de tipos de transa√ß√µes
FORMAS_PGTO_VALIDAS = ["d√©bito", "cr√©dito", "pix", "dinheiro", "outro"]

# Inicializa o banco e garante que as tabelas existam
criar_tabelas()

# ==================
# Fun√ß√µes auxiliares
# ==================

# Fun√ß√£o para mostrar boas-vindas e informa√ß√µes do aplicativo
def init_banner():
    from config import NOME_APP, VERSAO, DESCRICAO, AUTOR

    print("\n" + "-"*58)
    print(f"üßæ  {NOME_APP.upper()} - v{VERSAO}")
    print(f"üë§  Autor: {AUTOR}")
    print(f"üìù  {DESCRICAO}")
    print("-"*58 + "\n")

    time.sleep(0.5)

# Fun√ß√£o para normalizar texto (remover acentos e converter para min√∫sculo)
def normalizar(texto):
    """Remove acentos e converte pra min√∫sculo."""
    return unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode().lower()

# Fun√ß√£o para escolher uma op√ß√£o de lista
def escolher_opcao(nome_campo, opcoes_validas):
    """
    Solicita ao usu√°rio um valor, validando contra uma lista de op√ß√µes v√°lidas.
    Aceita varia√ß√µes sem acento ou mai√∫sculas.
    Retorna a string padronizada encontrada.
    """

    while True:
        entrada = input(f"üî∏ {nome_campo}: ").strip().lower(); print("-"*40)
        entrada_normalizada = normalizar(entrada)

        for opcao in opcoes_validas:
            if normalizar(opcao) == entrada_normalizada:
                return opcao  # ‚úÖ retorna a string original da lista

        print(f"\n‚ùå {nome_campo} inv√°lido. Op√ß√µes v√°lidas:")
        for opcao in opcoes_validas:
            print(f"   ‚Ä¢ {opcao.capitalize()}")
        print()

# Fun√ß√£o para escolher um item de uma lista de dicion√°rios
def escolher_item(titulo, lista, campo_busca=["nome"], campo_retorno="id", mostrar_tabela=None):
    """
    Permite ao usu√°rio escolher um item de uma lista de dicion√°rios digitando um valor de busca.

    Par√¢metros:
    - titulo: nome exibido ao usu√°rio ("Usu√°rio", "Categoria", etc.)
    - lista: lista de dicion√°rios (ex: [{"id": 1, "nome": "Petrus", "usuario": "PP"}])
    - campo_busca: campos aceitos como entrada (ex: ["nome", "usuario"])
    - campo_retorno: valor retornado (normalmente o "id")
    - mostrar_tabela: fun√ß√£o de exibi√ß√£o (ex: exibir_tabela), chamada em caso de erro
    """
    
    while True:
        entrada = input(f"üî∏ {titulo}: ").strip().lower(); print("-"*40)
        entrada_normalizada = normalizar(entrada)


        for item in lista:
            for campo in campo_busca:
                if entrada_normalizada == normalizar(str(item[campo]).lower()):
                    return item[campo_retorno]

        print(f"\n‚ùå {titulo} n√£o encontrado. Tente novamente.")
        if mostrar_tabela:
            mostrar_tabela(titulo, lista, list(lista[0].keys()))
        print()

# ====================================
# Fun√ß√£o principal do menu interativo
# ====================================
def menu():
    while True:
        time.sleep(1)

        print("="*40)
        print("üí∞  MEU DOCE DINHEIRO - MENU PRINCIPAL")
        print("="*40)
        print("1Ô∏è‚É£  Listar usu√°rios")
        print("2Ô∏è‚É£  Listar categorias")
        print("3Ô∏è‚É£  Listar transa√ß√µes")
        print("4Ô∏è‚É£  Adicionar transa√ß√£o")
        print("5Ô∏è‚É£  Resetar banco e popular dados")
        print("0Ô∏è‚É£  Sair")
        print("-"*40)

        escolha = input("üî∏ Escolha uma op√ß√£o: ").strip(); print("-"*40)

        if escolha == "1":
            usuarios = get_users()
            exibir_tabela("Usu√°rios", usuarios, ["id", "nome", "usuario"])
        
        elif escolha == "2":
            categorias = get_categories()
            exibir_tabela("Categorias", categorias, ["id", "nome", "metodo_pgto"])

        elif escolha == "3":
            print("\nüîé Filtros para listar transa√ß√µes (pressione Enter para ignorar)")
            
            try:
                usuario_id = input("üôã ID do usu√°rio: ").strip()
                usuario_id = int(usuario_id) if usuario_id else None

                mes = input("üìÖ M√™s (formato YYYY-MM): ").strip()
                mes = mes if mes else None

                tipo = input("üìå Tipo (renda/despesa): ").strip().lower()
                tipo = tipo if tipo else None

                forma_pgto = input("üí≥ Forma de pagamento: ").strip().lower()
                forma_pgto = forma_pgto if forma_pgto else None

                compartilhada = input("ü§ù Compartilhada? (s/n): ").strip().lower()
                if compartilhada == "s":
                    compartilhada = True

                elif compartilhada == "n":
                    compartilhada = False

                else:
                    compartilhada = None

                transacoes = get_transactions(
                    usuario_id      = usuario_id,
                    tipo            = tipo,
                    mes             = mes,
                    forma_pagamento = forma_pgto,
                    compartilhada   = compartilhada
                )

                exibir_tabela("Transa√ß√µes Filtradas", transacoes, [
                    "id", "valor", "tipo", "forma_pagamento",
                    "data", "descricao", "usuario", "categoria", "compartilhada"
                ])

            except Exception as e:
                print("‚ùå Erro ao aplicar filtros:", e)

        elif escolha == "4":
            try:
                print("\nüì• Adicionar nova transa√ß√£o")
                print("-"*40)

                valor         = float(input("üí∏ Valor (R$): ")); print("-"*40)
                tipo          = input("üìå Tipo (renda/despesa): ").strip().lower(); print("-"*40)
                forma_pgto    = escolher_opcao("Forma de pagamento", FORMAS_PGTO_VALIDAS)
                usuario_id    = escolher_item(
                    titulo         = "Usu√°rio",
                    lista          = get_users(),
                    campo_busca    = ["nome", "usuario"],
                    campo_retorno  = "id",
                    mostrar_tabela = exibir_tabela)
                categoria_id  = escolher_item(
                    titulo         = "Categoria",
                    lista          = get_categories(),
                    campo_busca    = ["nome"],
                    campo_retorno  = "id",
                    mostrar_tabela = exibir_tabela)
                descricao     = input("üìù Descri√ß√£o: "); print("-"*40)
                data          = validar_data(); print("-"*40)
                compartilhada = input("ü§ù Compartilhada? (s/n): ").strip().lower() == "s"; print("-"*40)

                add_transacao(
                    valor,
                    tipo,
                    forma_pgto,
                    descricao,
                    data,
                    usuario_id,
                    categoria_id,
                    compartilhada
                )
            
            except Exception as e:
                print("‚ùå Erro ao adicionar transa√ß√£o:", e)

        elif escolha == "5":
            from app.utils import recriar_db
            print("\n‚ö†Ô∏è  Resetando banco de dados...")
            recriar_db()
            print()

        elif escolha == "0":
            print("üíö Obrigado por usar o Meu Doce Dinheiro\n" \
                  "üëã At√© mais!"); print("-"*40)
            time.sleep(1)
            print()
            break

        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente."); print("-"*40)


if __name__ == "__main__":
    init_banner()
    menu()
